<template>
  <div class="input">
    <!-- 标题 -->
    <div class="header-area">
      <text class="header-text">Add Task</text>
    </div>

    <!-- 表单 -->
    <div class="form-area">
      <text>Task Name</text>
      <div class="text-area">
        <input
          type="text"
          placeholder="Task Name"
          class="input-text"
          model:value="{{name}}"
        />
        <image
          src="../../assets/images/microphone.png"
          class="image-micro"
          @click="showAsrBtn"
        ></image>
      </div>

      <text>Deadline</text>
      <div class="date-area">
        <image
          src="../../assets/images/calendar.png"
          class="image-calendar"
        ></image>
        <picker
          class="date-picker"
          type="date"
          value="{{deadline}}"
          @change="getDeadline()"
        ></picker>
      </div>

      <!-- 提交按钮 -->
      <div class="btn-area">
        <image
          src="../../assets/images/delete.png"
          class="image-del"
          if="{{isShowDel}}"
          @click="delTask"
        ></image>
        <input type="button" value="OK" class="input-btn" @click="addTask" />
      </div>
    </div>
    <!-- 语音按钮 -->
    <div
      class="asr-area"
      if="{{isShowAsr}}"
      @touchstart="startAsr"
      @touchend="stopAsr"
    >
      <image src="../../assets/images/microphone.png" class="image-asr"></image>
    </div>
  </div>
</template>

<script>
import prompt from '@system.prompt'
import storage from '@system.storage'
import router from '@system.router'
import asr from '@service.asr'
import vibrator from '@system.vibrator'

export default {
  data: {
    name: '',
    deadline: '',
    isShowAsr: false,
    asrName: '',
    isShowDel: false,
    //修改的任务
    task: {},
    index: 0,
    isModify: false,
    isDone: false
  },
  onInit() {
    this.initAsr();
    this.initDate();
    this.isModify = JSON.parse(this.isModify);
    //初始化修改任务
    if (this.isModify) {
      this.isShowDel = true;
      this.name = JSON.parse(this.task).name;
      this.deadline = JSON.parse(this.task).deadline;
      this.index = JSON.parse(this.index);
      this.isDone = JSON.parse(this.isDone);
    }
  },
  onDestroy() {
    asr.close();
  },
  // 初始化截止日期
  initDate() {
    const date = new Date();
    const Y = date.getFullYear();
    const M = date.getMonth() + 1;
    const D = date.getDate();
    this.deadline = Y + '-' + M + '-' + D;
  },
  //获取截止日期更新
  getDeadline(e) {
    this.deadline = e.year + '-' + (e.month + 1) + '-' + e.day;
  },
  //初始化语音识别
  initAsr() {
    asr.init({
      fail: function (data, code) {
        prompt.showToast({
          message: `init fail, code=${code}, data=${data}`
        });
      }
    })
    asr.onpartialresult = ({ result }) => {
      this.name = this.asrName + `${result}`;
    }
    asr.oncompleteresult = ({ result }) => {
      this.name = this.asrName + `${result.match(/\[(.*)\]/)[1]}`;
    }
    asr.onerror = (error) => {
      this.name = `onerror: ${error}`;
    }
  },
  //切换语音按钮显示
  showAsrBtn() {
    this.isShowAsr = !this.isShowAsr;
  },
  //开始语音识别
  startAsr() {
    let that = this;
    this.asrName = this.name;
    asr.start({
      success: function () {
        vibrator.vibrate({ mode: 'short' });
      },
      fail: function (data, code) {
        prompt.showToast({
          message: `start fail, code=${code}, data=${data}`
        });
      }
    });
  },
  //结束语音识别
  stopAsr() {
    let that = this;
    asr.stop({
      success: function () { },
      fail: function (data, code) {
        prompt.showToast({
          message: `stop fail, code=${code}, data=${data}`
        });
      }
    });
  },
  delTask() {
    let that = this;
    storage.get({
      key: 'taskList',
      success: function (data) {
        console.log('get success');
        if (data !== '') {
          let todoList = JSON.parse(data).todoList;
          let doneList = JSON.parse(data).doneList;
          let index = that.index;
          if (that.isDone) {
            doneList.splice(index, 1);
          }
          else {
            todoList.splice(index, 1);
          }
          let taskList = {
            todoList: todoList,
            doneList: doneList
          };
          storage.set({
            key: 'taskList',
            value: taskList,
            success: function (data) {
              console.log('save success');
              router.back();
            },
            fail: function (data, code) {
              console.log(`save fail, code = ${code}`);
            }
          });
        }
      },
      fail: function (data, code) {
        console.log(`get fail, code = ${code}`);
      }
    });
  },
  //存储任务并返回任务列表
  addTask() {
    if (this.name === '') {
      prompt.showToast({
        message: 'Task Name can not be null!'
      })
    }
    else {
      let that = this;
      storage.get({
        key: 'taskList',
        success: function (data) {
          console.log('get success');
          if (data !== '') {
            let todoList = JSON.parse(data).todoList;
            let doneList = JSON.parse(data).doneList;
            //如果是修改
            if (that.isModify) {
              let index = that.index;
              if (that.isDone) {
                doneList[index].name = that.name;
                doneList[index].deadline = that.deadline;
              }
              else {
                todoList[index].name = that.name;
                todoList[index].deadline = that.deadline;
              }
            }
            else {
              todoList.push({
                name: that.name,
                deadline: that.deadline
              });
            }
            let taskList = {
              todoList: todoList,
              doneList: doneList
            };
            storage.set({
              key: 'taskList',
              value: taskList,
              success: function (data) {
                console.log('save success');
                router.back();
              },
              fail: function (data, code) {
                console.log(`save fail, code = ${code}`);
              }
            });
          }
        },
        fail: function (data, code) {
          console.log(`get fail, code = ${code}`);
        }
      });
    }
  }
}
</script>

<style>
/* 基本样式 */

.input {
  display: flex;
  flex-direction: column;
  background-color: rgb(243, 245, 250);
}

.header-area {
  padding: 30px;
  margin-bottom: 30px;
}

.form-area {
  align-self: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 70%;
}

.text-area,
.date-area {
  margin: 10px;
  border: 1px solid #000000;
  border-radius: 5px;
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.btn-area {
  align-self: flex-end;
  padding: 20px;
}

.asr-area {
  position: absolute;
  bottom: 200px;
  background-color: #ffffff;
  border-radius: 60px;
  border: 1px solid rgb(243, 230, 240);
  align-self: center;
  width: 120px;
  height: 120px;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* 文本样式 */

text {
  color: #000000;
  font-size: 40px;
  width: 100%;
  padding-left: 10px;
}

.header-text {
  font-size: 60px;
}

/* 图像样式 */
.image-micro {
  width: 70px;
  padding-right: 20px;
}

.image-calendar {
  width: 70px;
  padding-left: 20px;
}

.image-del {
  margin-right: 30px;
}

.image-asr {
  width: 100px;
}

/* 表单样式 */
.input-text,
.date-picker {
  width: 80%;
  padding: 20px;
}

.input-btn {
  width: 30%;
  background-color: rgb(243, 245, 250);
  border-radius: 5px;
}
</style>