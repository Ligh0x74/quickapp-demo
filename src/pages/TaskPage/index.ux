<template>
  <div class="task-page">
    <list class="task-list" scrollpage="true">
      <!-- 列表名称 -->
      <list-item type="header" class="list-item-header">
        <text class="text-header">{{ listName }}</text>
      </list-item>

      <!-- 未完成任务 -->
      <block for="{{todoList}}">
        <list-item
          type="task"
          class="list-item-task"
          @click="modify($item, $idx, false)"
        >
          <image
            src="../../assets/images/todo.png"
            class="image-circle"
            @click="toFinish($idx, $item)"
          ></image>
          <text class="text-todo">{{ $item.name }}</text>
          <div class="date-area">
            <image
              src="../../assets/images/calendar.png"
              class="image-calendar"
            ></image>
            <text class="text-deadline">{{ $item.deadline }}</text>
          </div>
        </list-item>
      </block>

      <!-- 切换显示已完成任务 -->
      <list-item type="btn" class="list-item-btn" if="{{doneList.length}}">
        <image
          src="{{isShowBtn ? arrowDown:arrowRight}}"
          class="image-arrow"
          @click="toggleDisplay"
        ></image>
        <text>已完成&nbsp;{{ doneList.length }}</text>
      </list-item>

      <!-- 已完成任务 -->
      <block for="{{doneList}}" if="{{isShowBtn}}">
        <list-item
          type="task"
          class="list-item-task"
          @click="modify($item, $idx, true)"
        >
          <image
            src="../../assets/images/done.png"
            class="image-circle-finish"
            @click="toUnfinish($idx, $item)"
          ></image>
          <text class="text-done">{{ $item.name }}</text>
          <div class="date-area">
            <image
              src="../../assets/images/calendar.png"
              class="image-calendar"
            ></image>
            <text class="text-deadline">{{ $item.deadline }}</text>
          </div>
        </list-item>
      </block>

      <!-- 留白 -->
      <list-item type="blank" class="list-item-blank"></list-item>
    </list>

    <!-- 添加任务 -->
    <div class="add-task">
      <image
        src="../../assets/images/add-fill.png"
        class="image-add"
        @click="addTask"
      ></image>
    </div>
  </div>
</template>

<script>
import router from '@system.router';
import storage from '@system.storage'

export default {
  data: {
    listName: 'To Do',
    todoList: [],
    doneList: [],
    // todoList: [
    //   { name: '吃饭', deadline: '2020-10-10' },
    //   { name: '睡觉', deadline: '2020-8-28' },
    //   { name: '打code', deadline: '2020-10-10' },
    //   { name: '吃饭', deadline: '2020-8-28' },
    //   { name: '睡觉', deadline: '2020-10-10' },
    //   { name: '打code', deadline: '2020-8-28' },
    //   { name: '吃饭', deadline: '2020-10-10' },
    //   { name: '睡觉', deadline: '2020-8-28' }
    // ],
    // doneList: [
    //   { name: '打code', deadline: '2020-7-27' },
    //   { name: '吃饭', deadline: '2020-10-10' },
    //   { name: '睡觉', deadline: '2020-8-28' }
    // ],
    arrowDown: '../../assets/images/arrow_down.png',
    arrowRight: '../../assets/images/arrow_right.png',
    isShowBtn: true
  },
  onInit() {
    // storage.clear();
  },
  onShow() {
    this.updateList();
  },
  onHide() {
    this.saveList();
  },
  //将任务状态从未完成切换为完成
  toFinish(index, item, e) {
    //阻止冒泡
    e.stopPropagation();
    this.todoList.splice(index, 1);
    this.doneList.unshift(item);
  },
  //将任务状态从完成切换为未完成
  toUnfinish(index, item, e) {
    //阻止冒泡
    e.stopPropagation();
    this.doneList.splice(index, 1);
    this.todoList.push(item);
  },
  //切换已完成任务的显示状态
  toggleDisplay() {
    this.isShowBtn = !this.isShowBtn;
  },
  //修改任务
  modify(task, index, isDone) {
    // console.log(task);
    router.push({
      uri: 'pages/Input',
      params: {
        task: task,
        index: index,
        isModify: true,
        isDone: isDone
      }
    })
  },
  //跳转到输入页面
  addTask() {
    router.push({
      uri: 'pages/Input'
    })
  },
  //更新列表
  updateList() {
    let that = this;
    storage.get({
      key: 'taskList',
      success: function (data) {
        // console.log(data);
        console.log('update success');
        if (data !== '') {
          that.todoList = JSON.parse(data).todoList;
          that.doneList = JSON.parse(data).doneList;
          that.doneCount = that.doneList.length;
        }
      },
      fail: function (data, code) {
        console.log(`update fail, code = ${code}`);
      }
    });
  },
  saveList() {
    let taskList = {
      todoList: this.todoList,
      doneList: this.doneList
    };
    let that = this;
    storage.set({
      key: 'taskList',
      value: taskList,
      success: function (data) {
        console.log('save success');
      },
      fail: function (data, code) {
        console.log(`save fail, code = ${code}`);
      }
    });
  }
}
</script>

<style>
/* 基本样式 */

.task-page {
  display: flex;
  flex-direction: column;
}

.task-list {
  background-color: rgb(243, 245, 250);
}

.list-item-header {
  /* height: 150px; */
  padding-left: 30px;
  padding-bottom: 30px;
}

.list-item-task {
  display: flex;
  align-items: center;
  background-color: #ffffff;
  margin: 0 20px 10px 20px;
  height: 130px;
  border-radius: 10px;
}

.list-item-btn {
  display: flex;
  align-items: center;
  margin: 0 10px 10px 20px;
  height: 80px;
}

.list-item-blank {
  height: 170px;
}

.add-task {
  position: relative;
}

.date-area {
  display: flex;
  justify-content: center;
  align-items: center;
}

/* 文本样式 */

text {
  font-size: 35px;
  color: #000000;
}

.text-header {
  font-size: 60px;
}

.text-todo {
  width: 75%;
}

.text-done {
  color: #909399;
  text-decoration: line-through;
  width: 75%;
}

.text-deadline {
  width: 250px;
  font-size: 30px;
  margin-left: 20px;
  color: #808080;
}

/* 图像样式 */

.image-circle,
.image-circle-finish {
  width: 50px;
  margin: 0 30px;
}

.image-arrow {
  width: 50px;
}

.image-calendar {
  width: 50px;
}

.image-add {
  position: fixed;
  right: 30px;
  bottom: 30px;
  width: 150px;
}
</style>